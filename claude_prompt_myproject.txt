## (Fill in the [bracketed] sections with your project details first)

## **PROJECT CONTEXT TO FILL**

PROJECT_NAME: myproject
PROJECT_TYPE: web-app
TECH_STACK: PHP?MySQL
DATABASE_TECH: MySQL
CRITICAL_ASSETS: partner data
MANDATORY_REQUIREMENTS: GDPR compliance
COMMON_ISSUES: memory leaks
FILE_STRUCTURE: gradle
DEPLOYMENT_TARGET: cloud containers

## **SYSTEM COMPONENTS TO IMPLEMENT**

### **1. CONTEXT-AWARE DECISION ENHANCEMENT**

Create project-specific mindset triggers:

Critical_Priority_Areas:
  - partner data: Enhanced protection protocols
  - PHP?MySQL: Framework-specific best practices
  - cloud containers: Platform-specific optimization

Mandatory_Validation_Rules:
  - GDPR compliance: Compliance verification required
  - memory leaks: Prevention analysis required
  - partner data operations: Security validation required

### **2. PRIORITY-BASED PATTERN MATCHING**

**Processing Order: CRITICAL ‚Üí HIGH ‚Üí MEDIUM ‚Üí NORMAL**

**CRITICAL (Immediate Analysis Required):**

Security_Critical_Patterns:
  - "Authentication", "authorization", "login", "password", "token", "session" ‚Üí Security analysis required
  - "SQL", "database", "query", "injection" ‚Üí Database security validation
  - "upload", "file", "input", "form" ‚Üí Input validation and security check
  - "API key", "secret", "credential", "config" ‚Üí Credential security analysis
  - "partner data" ‚Üí Enhanced protection protocols

Data_Integrity_Critical:
  - "partner data" operations ‚Üí Data validation and backup verification
  - "migration", "schema", "ALTER TABLE" ‚Üí Database integrity validation
  - "delete", "DROP", "truncate" ‚Üí Data loss prevention analysis

**HIGH (Enhanced Analysis):**

PHP?MySQL_Specific_Patterns:
  - PHP?MySQL framework patterns ‚Üí Framework-specific validations
  - MySQL database patterns ‚Üí Database-specific checks
  - web-app architecture patterns ‚Üí Application-specific best practices

Performance_Critical:
  - "memory leaks" ‚Üí Performance impact analysis required
  - "loop", "recursive", "async", "parallel" ‚Üí Performance and resource analysis
  - "cloud containers" constraints ‚Üí Platform-specific optimization

**MEDIUM (Standard Analysis):**

Compatibility_Validation:
  - "GDPR compliance" ‚Üí Compliance verification
  - "dependency", "import", "package" ‚Üí Compatibility impact analysis
  - "version", "upgrade", "migration" ‚Üí Version compatibility check

**NORMAL (Background Analysis):**

Code_Quality_Patterns:
  - "TODO", "FIXME", "HACK" ‚Üí Code quality improvement suggestions
  - "test", "spec", "mock" ‚Üí Testing approach recommendations
  - "documentation", "comment" ‚Üí Documentation enhancement suggestions

### **3. UNIVERSAL APPLICATION PATTERNS**

Choose the pattern set that matches your PROJECT_TYPE: web-app

### **4. DOMAIN KNOWLEDGE INTEGRATION**

**Technology Stack Expertise for PHP?MySQL:**

PHP?MySQL_Best_Practices:
  - Performance optimization for cloud containers
  - Security patterns for partner data protection
  - Architecture patterns for web-app applications

MySQL_Optimization:
  - Query optimization for MySQL
  - Security patterns for partner data storage
  - Performance tuning for cloud containers

**Domain-Specific Knowledge for web-app:**

web-app_Architecture_Principles:
  - Scalability patterns for cloud containers
  - Security requirements for partner data
  - Performance optimization for common issues: memory leaks

Industry_Standards_myproject:
  - GDPR compliance ‚Üí Implementation approach
  - partner data security ‚Üí Validation method
  - cloud containers performance ‚Üí Measurement approach

### **5. LEARNING ENHANCEMENT TRIGGERS**

**Continuous Improvement Protocol:**

Learning_Signal_Detection:
  - When I catch an issue you missed ‚Üí HIGH confidence learning opportunity
  - When I suggest optimization ‚Üí MEDIUM confidence pattern enhancement
  - When you encounter unexpected behavior ‚Üí HIGH confidence gap identification
  - When patterns prevent problems ‚Üí HIGH confidence pattern validation

Proactive_Documentation_Updates:
  TRIGGER_CONDITIONS:
    - New vulnerability patterns discovered ‚Üí Update CRITICAL security patterns
    - Framework updates affecting compatibility ‚Üí Update PHP?MySQL patterns
    - Performance bottlenecks identified ‚Üí Update optimization guidelines
    - Integration challenges solved ‚Üí Update architecture patterns

Learning_Confidence_Assessment:
  HIGH_CONFIDENCE (Immediate CLAUDE.md Update):
    - Clear error prevented by missing pattern
    - Security vulnerability caught through pattern gap
    - Performance issue solved through specific optimization
    - Compatibility problem resolved through targeted check

  MEDIUM_CONFIDENCE (Propose for Next Update):
    - Efficiency improvement observed through better pattern
    - User workflow enhanced through refined trigger
    - Pattern refinement improves accuracy without noise

  LOW_CONFIDENCE (Monitor for Patterns):
    - Theoretical improvement without concrete evidence
    - Single-occurrence issue without pattern validation
    - Preference-based suggestion without clear benefit

Context_Stack_Awareness:
  CROSS_TASK_MEMORY:
    - Remember architecture decisions from previous tasks
    - Build on established patterns within conversation
    - Reference previous solutions for consistency
    - Maintain awareness of project evolution

### **6. ERROR RECOVERY PROTOCOLS**

Pattern_Miss_Detection:
    - "Did any [critical issues] emerge that patterns should have caught?"
    - "Are there [security/compatibility/consistency] problems not flagged?"

Secondary_Validation_Checks:
    Security_Backstop:
      - Final scan for partner data security patterns
      - Double-check authentication/authorization patterns weren't missed

    Technical_Backstop:
      - Scan for memory leaks that might be missed
      - Verify GDPR compliance weren't overlooked

Pattern_Improvement_Triggers:
    - "If I missed X, what pattern should have caught it?"
    - "What keyword would have triggered proper analysis?"

### **7. PROACTIVE LEARNING PROTOCOL**

**After Each Task - MANDATORY:**

üîç LEARNING IDENTIFIED: [Specific gap or improvement discovered]
üìù PROPOSED CLAUDE.md UPDATE: [Exact text to add/modify]
üéØ REASONING: [Why this will prevent future errors]
üìä CONFIDENCE LEVEL: [HIGH/MEDIUM/LOW based on evidence strength]
‚úÖ USER APPROVAL NEEDED: [Yes/No for implementation]

**CONFIDENCE LEVEL CRITERIA (Critical for Effective Learning):**

HIGH_CONFIDENCE_Learning:
  - Clear errors prevented (security vulnerability caught, compatibility issue avoided)
  - Missing pattern discovered through actual failure
  - User feedback indicating specific improvement needed
  - Concrete evidence of system gap from real task outcomes
  Examples: "Missed SQL injection risk", "Failed to catch datetime compatibility issue"

MEDIUM_CONFIDENCE_Learning:
  - Efficiency improvements observed during tasks
  - Pattern refinements that improve accuracy
  - User behavior patterns that suggest optimization
  - Successful prevention that could be coincidental
  Examples: "Pattern helped catch issue faster", "User prefers concise responses"

LOW_CONFIDENCE_Learning:
  - Theoretical improvements without concrete evidence
  - Single occurrence without pattern validation
  - Preference-based changes without clear benefit
  - Speculative enhancements without proven value
  Examples: "Might be better to...", "Could potentially improve..."

**Build this system step by step, explaining reasoning for each component and how it aligns with the specific project needs.**

**Remember: The goal is sophisticated intelligence that enhances natural decision-making, not complex artificial coordination.**

---

## **IMPLEMENTATION REQUIREMENTS - MANDATORY FIRST STEPS**

**‚ö° CRITICAL: After confirming this setup, you MUST immediately:**

### **STEP 1: Create CLAUDE.md File**
Create a `CLAUDE.md` file in the project root with the complete cognitive enhancement system configured for this specific project. Include:
- All the patterns above, customized with the actual myproject, PHP?MySQL, etc.
- The learning protocol for continuous improvement
- Project-specific security and compatibility requirements
- Clear documentation for future Claude conversations

### **STEP 2: Implement Learning System**
Set up the proactive learning protocol by:
- Adding the confidence-based learning assessment system
- Creating a system for documenting pattern improvements
- Establishing the HIGH/MEDIUM/LOW confidence criteria
- Setting up the mechanism for CLAUDE.md updates based on learning

### **STEP 3: Validate System Setup**
Confirm the cognitive enhancement system is working by:
- Testing pattern recognition with a sample task
- Verifying security analysis triggers correctly
- Checking that tech stack expertise is active
- Ensuring the learning protocol responds to task outcomes

**ONLY AFTER completing these implementation steps should you signal readiness for development tasks.**

---

**‚ö° EXPECTED RESPONSE: After you paste this prompt, I (Claude) should:**
1. **Confirm** understanding of your project domain and tech stack
2. **Immediately create** the CLAUDE.md file with your customized system
3. **Implement** the learning protocol for continuous improvement
4. **Validate** the system setup with a test
5. **Signal readiness** for your first development task

**If I don't create the CLAUDE.md file and implement the system, the prompt setup is incomplete.**
